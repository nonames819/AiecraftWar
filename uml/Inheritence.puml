@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(FlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # type:int
    # power:int
    # shootNum:int
    # shootStrategy:ShootStrategy
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, int power, int shootNum, int direction)
    + decreaseHp(int decrease):void
    + increaseHp(int increase):void
    + getHp():int
    + getPower():int
    + getShootNum():int
    + getDirection():int
    + getShootRate():int
    + setPower(int power):void
    + setDirection(int direction):void
    + setShootNum(int shootNum):void
    + setShootStrategy(ShootStrategy shootStrategy) : void
    + getShootStrategy():ShootStrategy
    + shoot():List<Bullet>
 }

abstract class BaseBullet
{
    - power:int
    + Bullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + effect():void
}

Interface BombObserver{
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- AbstractEnemy
AbstractEnemy <|-- MobEnemy
AbstractEnemy <|-- EliteEnemy
AbstractEnemy <|-- BossEnemy

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

BombObserver <|.. EnemyBullet
BombObserver <|.. AbstractEnemy


AbstractProp <|-- BombProp
AbstractProp <|-- FireProp
AbstractProp <|-- HpProp


class HeroAircraft {
    - {static} Instance: HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance(): HeroAircraft
    + forward():void
    + shoot():List<Bullet>
}
Abstract AbstractEnemy {

    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward(): void
    + update() : void
    + invalid() : boolean
    + dropProps(List<AbstractProp> factory): void
}


class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
}

class EliteEnemy {
    + propsRate : List<AbstractProp>
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + dropProps(List<AbstractProp> factory): void
}

class BossEnemy {
    + propsRate : List<AbstractProp>
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + dropProps(List<AbstractProp> factory): void
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
    + update() : void
    + invalid() : boolean
}

class BombProp{
    - {static} reminder : BombReminder
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + effect(AbstractAircraft obj):void
    + getReminder():BombReminder
}

class FireProp{
    - EFFECT_TIME : int
    - powerIncreased:int
    + FireProp(int locationX, int locationY, int speedX, int speedY, int powerIncreased)
    + effect(AbstractAircraft obj):void
}

class HpProp{
    - hpRecovered:int
    + HpProp(int locationX, int locationY, int speedX, int speedY, int hpRecovered)
    + effect(AbstractAircraft obj):void
}
@enduml